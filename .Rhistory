input$i_task_select
}
select(mySeries, -Date, -pubhol, -weekday, -id)[,1]
names(select(mySeries, -Date, -pubhol, -weekday, -id)[,1])
names(select(mySeries, -Date, -pubhol, -weekday, -id)[1])
runApp()
runApp()
weekends <- input$i_weekends
task_type <- if(input$i_task_select ==""){
#task_type = select_(paste0("(", mySeries, "-", quote(Date), ",-", quote(pubhol), ",-", quote(id), ",-", quote(weekday), ")"))
#select_(mySeries, quote(Date), quote(pubhol), quote(id), quote(weekday))[,1]
names(select(mySeries, -Date, -pubhol, -weekday, -id)[1])
} else
{
input$i_task_select
}
forecast_n <- input$i_forecast_n
dummy <- input$i_dummy
if(input$i_task_select ==""){
#task_type = select_(paste0("(", mySeries, "-", quote(Date), ",-", quote(pubhol), ",-", quote(id), ",-", quote(weekday), ")"))
#select_(mySeries, quote(Date), quote(pubhol), quote(id), quote(weekday))[,1]
names(select(mySeries, -Date, -pubhol, -weekday, -id)[1])
}
task_type <- if(input$i_task_select ==""){
#task_type = select_(paste0("(", mySeries, "-", quote(Date), ",-", quote(pubhol), ",-", quote(id), ",-", quote(weekday), ")"))
#select_(mySeries, quote(Date), quote(pubhol), quote(id), quote(weekday))[,1]
paste0('names(', select(mySeries, -Date, -pubhol, -weekday, -id),'[1])')
} else
{
input$i_task_select
}
paste0('names(', select(mySeries, -Date, -pubhol, -weekday, -id),'[1])')
task_type <- if(input$i_task_select ==""){
#task_type = select_(paste0("(", mySeries, "-", quote(Date), ",-", quote(pubhol), ",-", quote(id), ",-", quote(weekday), ")"))
#select_(mySeries, quote(Date), quote(pubhol), quote(id), quote(weekday))[,1]
paste0('names(', select_(mySeries, -Date, -pubhol, -weekday, -id),'[1])')
} else
{
input$i_task_select
}
select_(mySeries, quote(Date), quote(pubhol), quote(id), quote(weekday))[1]
select_(mySeries, -quote(Date), -quote(pubhol), -quote(id), -quote(weekday))[1]
select_(mySeries, quote(-Date), quote(-pubhol), quote(-id), quote(-weekday))[1]
names(select_(mySeries, quote(-Date), quote(-pubhol), quote(-id), quote(-weekday))[1])
?names
task_type <- if(input$i_task_select ==""){
#task_type = select_(paste0("(", mySeries, "-", quote(Date), ",-", quote(pubhol), ",-", quote(id), ",-", quote(weekday), ")"))
names(select_(mySeries, quote(-Date), quote(-pubhol), quote(-id), quote(-weekday))[1])
#paste0('names(', select_(mySeries, -Date, -pubhol, -weekday, -id),'[1])')
} else
{
input$i_task_select
}
runApp()
names_(select_(mySeries, quote(-Date), quote(-pubhol), quote(-id), quote(-weekday))[1])
runApp()
mySeries <- mySeries_raw()
mySeries_FTARIMA_daily <- mySeries_filtered()
mySeries %>%
select(-Date, -pubhol, -weekday, -id)[1]
runApp()
runApp()
runApp()
mySeries %>%
select(-Date, -pubhol, -weekday, -id)[1] %>%
names
str(mySeries)
mySeries %>%
select_(-Date, -pubhol, -weekday, -id)[1] %>%
names
mySeries %>%
select_(-Date, -pubhol, -weekday, -id)[1] %>%
names
mySeries %>%
select_(-mySeries$Date, -mySeries$pubhol, -mySeries$weekday, -mySeries$id)[1]
paste0("-", quote(Date), ",-", quote(pubhol), ",-", quote(id), ",-", quote(weekday))
mySeries %>%
select_(paste0("-", quote(Date), ",-", quote(pubhol), ",-", quote(id), ",-", quote(weekday)))
mySeries %>%
select_(paste0("-", quote(Date), ", -", quote(pubhol), ", -", quote(id), ", -", quote(weekday)))
select_(paste0("-", quote(Date), ", -", quote(pubhol), ", -", quote(id), ", -", quote(weekday)))
task_type <- mySeries %>%
select_(paste0("-", quote(Date), ", -", quote(pubhol), ", -", quote(id), ", -", quote(weekday)))
paste0('!', quote(weekday),' %in% c("Saturday","Sunday")')
task_type <- mySeries %>%
select_(paste0("!", quote(Date), ", !", quote(pubhol), ", !", quote(id), ", !", quote(weekday)))
if(input$i_task_select ==""){
#task_type <- mySeries %>%
#   select_(paste0("!", quote(Date), ", !", quote(pubhol), ", !", quote(id), ", !", quote(weekday)))
task_type <- mySeries %>%
select_(.dots = list(quote(-Date), quote(-pubhol), quote(-id), quote(-weekday)))
#select_(iris, .dots = list(quote(-Petal.Length), quote(-Petal.Width)))
#names(select_(mySeries, quote(-Date), quote(-pubhol), quote(-id), quote(-weekday))[1])
# mySeries %>%
#   select_(-Date, -pubhol, -weekday, -id)[1] %>%
#   names
#
#paste0('names(', select_(mySeries, -Date, -pubhol, -weekday, -id),'[1])')
} else
{
input$i_task_select
}
task_type <- mySeries %>%
select_(.dots = list(quote(-Date), quote(-pubhol), quote(-id), quote(-weekday)))
task_type
task_type <- mySeries %>%
select_(.dots = list(quote(-Date), quote(-pubhol), quote(-id), quote(-weekday)))[1] %>%
names
task_type <- mySeries %>%
select_(.dots = list(quote(-Date), quote(-pubhol), quote(-id), quote(-weekday)))[1]
task_type = names(task_type[1])
task_type <- mySeries %>%
select_(.dots = list(quote(-Date), quote(-pubhol), quote(-id), quote(-weekday)))
task_type = names(task_type[1])
task_type
if(input$i_task_select ==""){
#task_type <- mySeries %>%
#   select_(paste0("!", quote(Date), ", !", quote(pubhol), ", !", quote(id), ", !", quote(weekday)))
task_type <- mySeries %>%
select_(.dots = list(quote(-Date), quote(-pubhol), quote(-id), quote(-weekday)))
task_type = names(task_type[1])
#select_(iris, .dots = list(quote(-Petal.Length), quote(-Petal.Width)))
#names(select_(mySeries, quote(-Date), quote(-pubhol), quote(-id), quote(-weekday))[1])
# mySeries %>%
#   select_(-Date, -pubhol, -weekday, -id)[1] %>%
#   names
#
#paste0('names(', select_(mySeries, -Date, -pubhol, -weekday, -id),'[1])')
} else
{
input$i_task_select
}
if(input$i_task_select ==""){
#task_type <- mySeries %>%
#   select_(paste0("!", quote(Date), ", !", quote(pubhol), ", !", quote(id), ", !", quote(weekday)))
task_type = select_(mySeries, .dots = list(quote(-Date), quote(-pubhol), quote(-id), quote(-weekday)))
task_type = names(task_type[1])
#select_(iris, .dots = list(quote(-Petal.Length), quote(-Petal.Width)))
#names(select_(mySeries, quote(-Date), quote(-pubhol), quote(-id), quote(-weekday))[1])
# mySeries %>%
#   select_(-Date, -pubhol, -weekday, -id)[1] %>%
#   names
#
#paste0('names(', select_(mySeries, -Date, -pubhol, -weekday, -id),'[1])')
}
list(quote(-Date), quote(-pubhol), quote(-id), quote(-weekday))
runApp()
runApp()
task_type
runApp()
mySeries <- mySeries_raw()
mySeries_FTARIMA_daily <- mySeries_filtered()
runApp()
if (weekends == "no"){
mySeries_filtered <- mySeries %>%
select(Date, pubhol, id, weekday, task_type) %>%
filter_(paste0('!', quote(weekday),' %in% c("Saturday","Sunday")'))
}
else
{
mySeries_filtered <- mySeries %>% select(Date, pubhol, id, weekday, task_type)
}
runApp()
runApp()
str(mySeries_FTARIMA_daily)
runApp()
myY <- ts(select_(mySeries_FTARIMA_daily, task_type), freq = 365.25/7)
isolate({
weekends <- input$i_weekends
if (input$i_task_select == "") {
task_type = select_(mySeries, .dots = list(quote(-Date),
quote(-pubhol), quote(-id), quote(-weekday)))
task_type = names(task_type[1])
}
else {
task_type = input$i_task_select
}
forecast_n <- input$i_forecast_n
dummy <- input$i_dummy
})
if (input$i_task_select == "") {
task_type = select_(mySeries, .dots = list(quote(-Date),
quote(-pubhol), quote(-id), quote(-weekday)))
task_type = names(task_type[1])
}
else {
task_type = input$i_task_select
}
task_type = select_(mySeries, .dots = list(quote(-Date),
quote(-pubhol), quote(-id), quote(-weekday)))
task_type = names(task_type[1])
myY <- ts(select_(mySeries_FTARIMA_daily, task_type), freq = 365.25/7)
runApp()
myY <- ts(select_(mySeries_FTARIMA_daily, task_type), freq = 365.25/7)
withProgress(message = "Optimising forecast model... ",
detail = "this may take a few seconds", value = 0.1,
min = 0, max = 1, {
bestfit <- list(aicc = Inf)
for (i in 2:25) {
incProgress(0.1)
if (dummy == "no") {
myXReg_fit <- fourier(myY, K = i)
myXReg_forecast <- fourier(myY, K = i - 1,
h = forecast_n)
}
else {
myXReg_fit <- cbind(fourier(myY, K = i), select_(mySeries_FTARIMA_daily,
quote(pubhol)))
myXReg_forecast <- cbind(fourier(myY, K = i -
1, h = forecast_n), ifelse(seq.Date(as.Date(last(select_(mySeries_FTARIMA_daily,
quote(Date)))[[1]]), as.Date(last(select_(mySeries_FTARIMA_daily,
quote(Date)))[[1]]) + forecast_n, by = "days") %in%
select_(pubhol, quote(Date)), 1, 0))
}
fit <- auto.arima(myY, xreg = myXReg_fit, seasonal = FALSE)
if (fit$aicc < bestfit$aicc)
bestfit <- fit
else break
}
})
TS_mySeries_FTARIMA_daily <- forecast(bestfit, xreg = myXReg_forecast)
fit_FTARIMA_daily_df <- cbind(as.data.frame(TS_mySeries_FTARIMA_daily$fitted)[1:nrow(mySeries_FTARIMA_daily),
], select_(mySeries_FTARIMA_daily, quote(Date)))
colnames(fit_FTARIMA_daily_df) <- c("fitted", "Date")
forecast_FTARIMA_daily_df <- with(TS_mySeries_FTARIMA_daily,
data.frame(mean = TS_mySeries_FTARIMA_daily$mean, upper = TS_mySeries_FTARIMA_daily$upper[,
2], lower = TS_mySeries_FTARIMA_daily$lower[, 2]))
forecast_FTARIMA_daily_df$Date <- seq(max(mySeries_FTARIMA_daily$Date),
max(mySeries_FTARIMA_daily$Date) + forecast_n - 1, 1)
if (weekends == "no") {
mySeq <- seq.Date(as.Date(first(select_(forecast_FTARIMA_daily_df,
quote(Date)))[[1]]), length.out = forecast_n * 2,
by = "days")
mySeq <- mySeq[!weekdays(mySeq) %in% c("Saturday", "Sunday")][0:forecast_n]
forecast_FTARIMA_daily_df$Date <- mySeq
}
output$time_series_table <- renderDataTable({
forecast_FTARIMA_daily_df <- forecast_FTARIMA_daily_df %>%
filter(mean > 0) %>% select(Date, mean, upper, lower) %>%
mutate(mean = round(mean, 2), upper = round(upper,
2), lower = round(lower, 2))
})
output$downloader = downloadHandler(paste0("FTARIMA", "_",
task_type, "_", forecast_n, "periods.csv"), content = function(file) {
write.csv(forecast_FTARIMA_daily_df, file)
})
output$performance_metrics <- renderDataTable({
myAccuracy <- accuracy(TS_mySeries_FTARIMA_daily)
myAccuracy <- as.data.frame(as.table(myAccuracy))
myAccuracy <- myAccuracy %>% select(metric = Var2, value = Freq) %>%
mutate(value = round(value, 3))
isolate({
performance$performance_compare = bind_cols(performance$performance_compare,
data.frame(FTARIMA = myAccuracy[, 2]))
})
})
myX <- xts(select_(mySeries_FTARIMA_daily, series = work_type),
select_(mySeries_FTARIMA_daily, quote(Date)), order.by = as.POSIXct(mySeries_FTARIMA_daily$Date))
myfitted <- xts(select_(fit_FTARIMA_daily_df, quote(fitted),
quote(Date)), order.by = as.POSIXct(mySeries_FTARIMA_daily$Date))
myPred <- xts(select_(forecast_FTARIMA_daily_df, quote(mean),
quote(upper), quote(lower), quote(Date)), order.by = as.POSIXct(forecast_FTARIMA_daily_df$Date))
myDy <- cbind(myX, myfitted, myPred)
d <- dygraph(myDy[, 1:6][, -3], main = paste0("ARIMA with FOURIER FORECAST for ",
work_type, ": ", task_type, " for ", forecast_n, " periods")) %>%
dyAxis("x", drawGrid = FALSE) %>% dyOptions(colors = RColorBrewer::brewer.pal(3,
"Set2")) %>% dySeries(c("upper", "mean", "lower"), label = "predicted") %>%
dySeries("series") %>% dySeries("fitted", fillGraph = TRUE) %>%
dyHighlight(highlightSeriesOpts = list(strokeWidth = 3)) %>%
dyLegend(width = 400) %>% dyEvent("2016-3-27", "Easter 2016",
labelLoc = "bottom") %>% dyEvent("2015-4-5", "Easter 2015",
labelLoc = "bottom") %>% dyEvent("2014-4-20", "Easter 2014",
labelLoc = "bottom") %>% dyEvent("2013-3-31", "Easter 2013",
labelLoc = "bottom") %>% dyRangeSelector()
print(d)
runApp()
runApp()
?hr
runApp()
?sidebarPanel
?fluidPage
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
TS_mySeries_FTARIMA_daily <- forecast(bestfit, xreg = myXReg_forecast)
fit_FTARIMA_daily_df <- cbind(as.data.frame(TS_mySeries_FTARIMA_daily$fitted)[1:nrow(mySeries_FTARIMA_daily),
], select_(mySeries_FTARIMA_daily, quote(Date)))
colnames(fit_FTARIMA_daily_df) <- c("fitted", "Date")
forecast_FTARIMA_daily_df <- with(TS_mySeries_FTARIMA_daily,
data.frame(mean = TS_mySeries_FTARIMA_daily$mean, upper = TS_mySeries_FTARIMA_daily$upper[,
2], lower = TS_mySeries_FTARIMA_daily$lower[, 2]))
forecast_FTARIMA_daily_df$Date <- seq(max(mySeries_FTARIMA_daily$Date),
max(mySeries_FTARIMA_daily$Date) + forecast_n - 1, 1)
if (weekends == "no") {
mySeq <- seq.Date(as.Date(first(select_(forecast_FTARIMA_daily_df,
quote(Date)))[[1]]), length.out = forecast_n * 2,
by = "days")
mySeq <- mySeq[!weekdays(mySeq) %in% c("Saturday", "Sunday")][0:forecast_n]
forecast_FTARIMA_daily_df$Date <- mySeq
}
weekends
seq.Date(as.Date(first(select_(forecast_FTARIMA_daily_df,
quote(Date)))[[1]]), length.out = forecast_n * 2,
by = "days")
mySeq <- mySeq[!weekdays(mySeq) %in% c("Saturday", "Sunday")][0:forecast_n]
mySeq <- seq.Date(as.Date(first(select_(forecast_FTARIMA_daily_df,
quote(Date)))[[1]]), length.out = forecast_n * 2,
by = "days")
mySeq <- mySeq[!weekdays(mySeq) %in% c("Saturday", "Sunday")][0:forecast_n]
forecast_FTARIMA_daily_df$Date <- mySeq
weekends == "no"
if (weekends == "no") {
mySeq <- seq.Date(as.Date(first(select_(forecast_FTARIMA_daily_df,
quote(Date)))[[1]]), length.out = forecast_n * 2,
by = "days")
mySeq <- mySeq[!weekdays(mySeq) %in% c("Saturday", "Sunday")][0:forecast_n]
forecast_FTARIMA_daily_df$Date <- mySeq
}
output$time_series_table <- renderDataTable({
forecast_FTARIMA_daily_df <- forecast_FTARIMA_daily_df %>%
filter(mean > 0) %>% select(Date, mean, upper, lower) %>%
mutate(mean = round(mean, 2), upper = round(upper,
2), lower = round(lower, 2))
})
output$downloader = downloadHandler(paste0("FTARIMA", "_",
task_type, "_", forecast_n, "periods.csv"), content = function(file) {
write.csv(forecast_FTARIMA_daily_df, file)
})
output$performance_metrics <- renderDataTable({
myAccuracy <- accuracy(TS_mySeries_FTARIMA_daily)
myAccuracy <- as.data.frame(as.table(myAccuracy))
myAccuracy <- myAccuracy %>% select(metric = Var2, value = Freq) %>%
mutate(value = round(value, 3))
isolate({
performance$performance_compare = bind_cols(performance$performance_compare,
data.frame(FTARIMA = myAccuracy[, 2]))
})
myX <- xts(select_(mySeries_FTARIMA_daily, series = task_type),
select_(mySeries_FTARIMA_daily, quote(Date)), order.by = as.POSIXct(mySeries_FTARIMA_daily$Date))
myfitted <- xts(select_(fit_FTARIMA_daily_df, quote(fitted),
quote(Date)), order.by = as.POSIXct(mySeries_FTARIMA_daily$Date))
myPred <- xts(select_(forecast_FTARIMA_daily_df, quote(mean),
quote(upper), quote(lower), quote(Date)), order.by = as.POSIXct(forecast_FTARIMA_daily_df$Date))
myDy <- cbind(myX, myfitted, myPred)
d <- dygraph(myDy[, 1:6][, -3], main = paste0("ARIMA with FOURIER FORECAST of: ",
task_type, " for ", forecast_n, " periods")) %>% dyAxis("x",
drawGrid = FALSE) %>% dyOptions(colors = RColorBrewer::brewer.pal(3,
"Set2")) %>% dySeries(c("upper", "mean", "lower"), label = "predicted") %>%
dySeries("series") %>% dySeries("fitted", fillGraph = TRUE) %>%
dyHighlight(highlightSeriesOpts = list(strokeWidth = 3)) %>%
dyLegend(width = 400) %>% dyEvent("2016-3-27", "Easter 2016",
labelLoc = "bottom") %>% dyEvent("2015-4-5", "Easter 2015",
labelLoc = "bottom") %>% dyEvent("2014-4-20", "Easter 2014",
labelLoc = "bottom") %>% dyEvent("2013-3-31", "Easter 2013",
labelLoc = "bottom") %>% dyRangeSelector()
print(d)
)
d <- dygraph(myDy[, 1:6][, -3], main = paste0("ARIMA with FOURIER FORECAST of: ",
task_type, " for ", forecast_n, " periods")) %>% dyAxis("x",
drawGrid = FALSE) %>% dyOptions(colors = RColorBrewer::brewer.pal(3,
"Set2")) %>% dySeries(c("upper", "mean", "lower"), label = "predicted") %>%
dySeries("series") %>% dySeries("fitted", fillGraph = TRUE) %>%
dyHighlight(highlightSeriesOpts = list(strokeWidth = 3)) %>%
dyLegend(width = 400) %>% dyEvent("2016-3-27", "Easter 2016",
labelLoc = "bottom") %>% dyEvent("2015-4-5", "Easter 2015",
labelLoc = "bottom") %>% dyEvent("2014-4-20", "Easter 2014",
labelLoc = "bottom") %>% dyEvent("2013-3-31", "Easter 2013",
labelLoc = "bottom") %>% dyRangeSelector()
print(d)
if (weekends == "no") {
mySeq <- seq.Date(as.Date(first(select_(forecast_FTARIMA_daily_df,
quote(Date)))[[1]]), length.out = forecast_n * 2,
by = "days")
mySeq <- mySeq[!weekdays(mySeq) %in% c("Saturday", "Sunday")][0:forecast_n]
forecast_FTARIMA_daily_df$Date <- mySeq
}
mySeq <- seq.Date(as.Date(first(select_(forecast_FTARIMA_daily_df,
quote(Date)))[[1]]), length.out = forecast_n * 2,
by = "days")
mySeq <- mySeq[!weekdays(mySeq) %in% c("Saturday", "Sunday")][0:forecast_n]
forecast_FTARIMA_daily_df$Date <- mySeq
mySeries <- mySeries_raw()
mySeries_FTARIMA_daily <- mySeries_filtered()
if (nrow(mySeries_FTARIMA_daily) == 0) {
stop(showModal(modalDialog(title = "Important message",
"Please hit \"start forecasting\"!", easyClose = TRUE,
size = "s")))
}
isolate({
weekends <- input$i_weekends
if (input$i_task_select == "") {
task_type = select_(mySeries, .dots = list(quote(-Date),
quote(-pubhol), quote(-id), quote(-weekday)))
task_type = names(task_type[1])
}
else {
task_type = input$i_task_select
}
forecast_n <- input$i_forecast_n
dummy <- input$i_dummy
})
myY <- ts(select_(mySeries_FTARIMA_daily, task_type), freq = 365.25/7)
withProgress(message = "Optimising forecast model... ",
detail = "this may take a few seconds", value = 0.1,
min = 0, max = 1, {
bestfit <- list(aicc = Inf)
for (i in 2:25) {
incProgress(0.1)
if (dummy == "no") {
myXReg_fit <- fourier(myY, K = i)
myXReg_forecast <- fourier(myY, K = i - 1,
h = forecast_n)
}
else {
myXReg_fit <- cbind(fourier(myY, K = i), select_(mySeries_FTARIMA_daily,
quote(pubhol)))
myXReg_forecast <- cbind(fourier(myY, K = i -
1, h = forecast_n), ifelse(seq.Date(as.Date(last(select_(mySeries_FTARIMA_daily,
quote(Date)))[[1]]), as.Date(last(select_(mySeries_FTARIMA_daily,
quote(Date)))[[1]]) + forecast_n, by = "days") %in%
select_(pubhol, quote(Date)), 1, 0))
}
fit <- auto.arima(myY, xreg = myXReg_fit, seasonal = FALSE)
if (fit$aicc < bestfit$aicc)
bestfit <- fit
else break
}
})
browser()
TS_mySeries_FTARIMA_daily <- forecast(bestfit, xreg = myXReg_forecast)
fit_FTARIMA_daily_df <- cbind(as.data.frame(TS_mySeries_FTARIMA_daily$fitted)[1:nrow(mySeries_FTARIMA_daily),
], select_(mySeries_FTARIMA_daily, quote(Date)))
colnames(fit_FTARIMA_daily_df) <- c("fitted", "Date")
forecast_FTARIMA_daily_df <- with(TS_mySeries_FTARIMA_daily,
data.frame(mean = TS_mySeries_FTARIMA_daily$mean, upper = TS_mySeries_FTARIMA_daily$upper[,
2], lower = TS_mySeries_FTARIMA_daily$lower[, 2]))
forecast_FTARIMA_daily_df$Date <- seq(max(mySeries_FTARIMA_daily$Date),
max(mySeries_FTARIMA_daily$Date) + forecast_n - 1, 1)
if (weekends == "no") {
mySeq <- seq.Date(as.Date(first(select_(forecast_FTARIMA_daily_df,
quote(Date)))[[1]]), length.out = forecast_n * 2,
by = "days")
mySeq <- mySeq[!weekdays(mySeq) %in% c("Saturday", "Sunday")][0:forecast_n]
forecast_FTARIMA_daily_df$Date <- mySeq
}
output$time_series_table <- renderDataTable({
forecast_FTARIMA_daily_df <- forecast_FTARIMA_daily_df %>%
filter(mean > 0) %>% select(Date, mean, upper, lower) %>%
mutate(mean = round(mean, 2), upper = round(upper,
2), lower = round(lower, 2))
})
output$downloader = downloadHandler(paste0("FTARIMA", "_",
task_type, "_", forecast_n, "periods.csv"), content = function(file) {
write.csv(forecast_FTARIMA_daily_df, file)
})
output$performance_metrics <- renderDataTable({
myAccuracy <- accuracy(TS_mySeries_FTARIMA_daily)
myAccuracy <- as.data.frame(as.table(myAccuracy))
myAccuracy <- myAccuracy %>% select(metric = Var2, value = Freq) %>%
mutate(value = round(value, 3))
isolate({
performance$performance_compare = bind_cols(performance$performance_compare,
data.frame(FTARIMA = myAccuracy[, 2]))
})
})
myX <- xts(select_(mySeries_FTARIMA_daily, series = task_type),
select_(mySeries_FTARIMA_daily, quote(Date)), order.by = as.POSIXct(mySeries_FTARIMA_daily$Date))
myfitted <- xts(select_(fit_FTARIMA_daily_df, quote(fitted),
quote(Date)), order.by = as.POSIXct(mySeries_FTARIMA_daily$Date))
myPred <- xts(select_(forecast_FTARIMA_daily_df, quote(mean),
quote(upper), quote(lower), quote(Date)), order.by = as.POSIXct(forecast_FTARIMA_daily_df$Date))
myDy <- cbind(myX, myfitted, myPred)
d <- dygraph(myDy[, 1:6][, -3], main = paste0("ARIMA with FOURIER FORECAST of: ",
task_type, " for ", forecast_n, " periods")) %>% dyAxis("x",
drawGrid = FALSE) %>% dyOptions(colors = RColorBrewer::brewer.pal(3,
"Set2")) %>% dySeries(c("upper", "mean", "lower"), label = "predicted") %>%
dySeries("series") %>% dySeries("fitted", fillGraph = TRUE) %>%
dyHighlight(highlightSeriesOpts = list(strokeWidth = 3)) %>%
dyLegend(width = 400) %>% dyEvent("2016-3-27", "Easter 2016",
labelLoc = "bottom") %>% dyEvent("2015-4-5", "Easter 2015",
labelLoc = "bottom") %>% dyEvent("2014-4-20", "Easter 2014",
labelLoc = "bottom") %>% dyEvent("2013-3-31", "Easter 2013",
labelLoc = "bottom") %>% dyRangeSelector()
print(d)
myX
myfitted
myPred
myDy <- cbind(myX, myfitted, myPred)
myDy[, 1:6][, -3]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/GitHub/Basic-School-Shiny-Survey')
runApp('~/Documents/DATA SCIENCE/88. Work Experience/School_Stuff')
runApp()
runApp()
setwd("~/GitHub/Time-Series-Forecasting-with-Shiny")
